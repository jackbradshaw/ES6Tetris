(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _srcTetrisViewmodel = require("./src/TetrisViewmodel");

var _srcTetrisViewmodel2 = _interopRequireDefault(_srcTetrisViewmodel);

var viewModel = new TetrisViewModel(12, 20, "blue");

},{"./src/TetrisViewmodel":3}],2:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _Tetromino = require("./Tetromino");

var _Tetromino2 = _interopRequireDefault(_Tetromino);

var Grid = (function () {
    var self;
    var row = 0;
    self.block;

    var Grid = function Grid(width, height) {
        self = this;
        self.tiles = ko.observableArray();
        for (var y = 0; y < height; y++) {
            addRow();
        }
    };

    function addRow() {
        var row = [];
        for (var x = 0; x < width; x++) {
            row[x] = new Tile(false, self.colour);
        }
        self.tiles.unshift(row);
    }

    Grid.prototype.removeCompleteRows = function () {
        self.tiles().forEach(function (row) {
            var rowComplete = row.every(function (tile) {
                return tile.occupied();
            });
            if (rowComplete) {
                self.tiles.remove(row);
                addRow();
            }
        });
    };

    Grid.prototype.moveDown = function () {
        var moved = self.block.move({ x: 0, y: 1 });
        if (!moved) {
            self.addBlock(self.getNewBlock(), { x: 5, y: 0 });
            self.removeCompleteRows();
        }
    };

    Grid.prototype.addBlock = function (block) {
        self.block = block;
    };

    Grid.prototype.getNewBlock = function () {
        var blocks = [makeBlock([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }, { x: 1, y: 2 }], "red"), makeBlock([{ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 1, y: 0 }, { x: 2, y: 0 }], "green"), makeBlock([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }, { x: 0, y: 3 }], "white"), makeBlock([{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }], "yellow"), makeBlock([{ x: 1, y: -1 }, { x: 1, y: 0 }, { x: 1, y: 1 }, { x: 0, y: 1 }], "magenta"), makeBlock([{ x: -1, y: -1 }, { x: -1, y: 0 }, { x: -1, y: 1 }, { x: 0, y: 1 }], "cyan")];

        var randomIndex = Math.floor(Math.random() * blocks.length);
        return blocks[randomIndex];
    };

    function makeBlock(points, blockColour) {
        var block = new _Tetromino2["default"](points, self, blockColour);
        block.position = {
            x: width / 2,
            y: block.height()
        };
        return block;
    }

    Grid.prototype.contains = function (coordinate) {
        return 0 <= coordinate.x && coordinate.x < width && 0 <= coordinate.y && coordinate.y < height;
    };

    return Grid;
})();

modules["export"] = Grid;

},{"./Tetromino":4}],3:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _Grid = require("./Grid");

var _Grid2 = _interopRequireDefault(_Grid);

var TetrisViewModel = (function () {
    var TetrisViewModel = function TetrisViewModel(width, height, colour) {
        var self = this;
        self.grid = new _Grid2["default"](width, height, colour);
    };

    TetrisViewModel.prototype.tick = function () {
        self.grid.moveDown();
    };

    TetrisViewModel.prototype.keyDown = function (viewModel, event) {
        var code = event.keyCode || event.which;
        if (code === 97) {
            self.grid.block.move({ x: -1, y: 0 });
        }
        if (code === 100) {
            self.grid.block.move({ x: 1, y: 0 });
        }
        if (code === 115) {
            self.grid.block.move({ x: 0, y: 1 });
        }
        if (code === 32) {
            self.grid.block.rotate();
        }
    };
})();

modules["export"] = TetrisViewModel;

},{"./Grid":2}],4:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _Grid = require("./Grid");

var _Grid2 = _interopRequireDefault(_Grid);

var Tetromino = (function () {

    var self;
    var Tetromino = function Tetromino(minos, grid, colour) {
        self = this;
    };

    Tetromino.prototype.height = function () {
        var yValues = minos.map(function (mino) {
            return mino.y;
        });
        var minY = Math.min.apply(null, yValues);
        var maxY = Math.max.apply(null, yValues);
        return maxY - minY;
    };

    Tetromino.prototype.getTiles = function () {
        return getOffsetCoordinates().map(function (coordinate) {
            if (!grid.contains(coordinate)) {
                throw new Error("Coordinate not in grid");
            } else {
                return grid.tiles()[coordinate.y][coordinate.x];
            }
        });
    };

    Tetromino.prototype.move = function (direction) {
        var canMoveBlock = canMove(direction);
        if (canMoveBlock) {
            redrawBlock(function () {
                self.position.y += direction.y;
                self.position.x += direction.x;
            });
        }
        return canMoveBlock;
    };

    Tetromino.prototype.rotate = function () {
        if (canRotate()) {
            redrawBlock(function () {
                minos = getRotated(minos);
            });
        }
    };

    function getRotated(coordinates) {
        return coordinates.map(function (coordinate) {
            return { x: coordinate.y, y: -coordinate.x };
        });
    }

    function canRotate() {
        return willFit(getOffsetCoordinates(getRotated(minos)));
    }

    function getOffsetCoordinates(coordinates) {
        coordinates = coordinates || minos;
        return coordinates.map(function (coordinate) {
            return {
                x: self.position.x + coordinate.x,
                y: self.position.y + coordinate.y
            };
        });
    }

    function redrawBlock(update) {
        self.getTiles().forEach(function (tile) {
            tile.occupied(false);
        });
        update();
        self.getTiles().forEach(function (tile) {
            tile.occupied(true);
            tile.colour(colour);
        });
    }

    function canMove(direction) {
        var coordinates = getOffsetCoordinates();
        return willFit(coordinates.map(function (tile) {
            return {
                x: tile.x + direction.x,
                y: tile.y + direction.y
            };
        }));
    }

    function willFit(coordinates) {
        var blockTiles = self.getTiles();
        return coordinates.every(function (coordinate) {
            var coordinateFree = false;
            if (grid.contains(coordinate)) {
                var tile = grid.tiles()[coordinate.y][coordinate.x];
                coordinateFree = !tile || blockTiles.indexOf(tile) !== -1 || !tile.occupied();
            }
            return coordinateFree;
        });
    }
    return Tetromino;
})();

modules["export"] = Tetromino;

},{"./Grid":2}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
